/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.FishingData;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-27T10:00:28.709678+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "FishingData", description = "the FishingData API")
public interface FishingDataApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /fishingData : Add a new fishing data
     *
     * @param fishingData Create a new fishing data (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addFishingData",
        summary = "Add a new fishing data",
        tags = { "fishingData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishingData.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = FishingData.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={ "write:fishingData", "read:fishingData" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fishingData",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<FishingData> _addFishingData(
        @Parameter(name = "FishingData", description = "Create a new fishing data", required = true) @Valid @RequestBody FishingData fishingData
    ) {
        return addFishingData(fishingData);
    }

    // Override this method
    default  ResponseEntity<FishingData> addFishingData(FishingData fishingData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fishingSpot\" : \"fishingSpot\", \"altitude\" : 6.0274563, \"genus\" : \"Cyprinus\", \"longtitude\" : 0.8008282, \"length\" : 1, \"weight\" : 5, \"id\" : 15 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<fishingData> <id>15</id> <genus>Cyprinus</genus> <longtitude>1.3579</longtitude> <altitude>1.3579</altitude> <length>123456789</length> <weight>123456789</weight> <fishingSpot>aeiou</fishingSpot> </fishingData>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /fishingData/{fishingDataId} : Deletes a fishing data record
     * delete a fishing data record
     *
     * @param fishingDataId id of fishing data record to delete (required)
     * @param apiKey  (optional)
     * @return Invalid fishing record id value (status code 400)
     */
    @Operation(
        operationId = "deleteFishingData",
        summary = "Deletes a fishing data record",
        description = "delete a fishing data record",
        tags = { "fishingData" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid fishing record id value")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={ "write:fishingData", "read:fishingData" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/fishingData/{fishingDataId}"
    )
    default ResponseEntity<Void> _deleteFishingData(
        @Parameter(name = "fishingDataId", description = "id of fishing data record to delete", required = true, in = ParameterIn.PATH) @PathVariable("fishingDataId") Long fishingDataId,
        @Parameter(name = "api_key", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return deleteFishingData(fishingDataId, apiKey);
    }

    // Override this method
    default  ResponseEntity<Void> deleteFishingData(Long fishingDataId, String apiKey) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fishinData/findBySpecies : find fishing data by species
     *
     * @param species Spacies names that need to be considered for filter (optional)
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @param limit The numbers of items to return (optional)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findBySpecies",
        summary = "find fishing data by species",
        tags = { "fishingData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FishingData.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = FishingData.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={ "read:fishingData" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fishinData/findBySpecies",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<FishingData>> _findBySpecies(
        @Parameter(name = "species", description = "Spacies names that need to be considered for filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "species", required = false) String species,
        @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "The numbers of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        return findBySpecies(species, offset, limit);
    }

    // Override this method
    default  ResponseEntity<List<FishingData>> findBySpecies(String species, Integer offset, Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"fishingSpot\" : \"fishingSpot\", \"altitude\" : 6.0274563, \"genus\" : \"Cyprinus\", \"longtitude\" : 0.8008282, \"length\" : 1, \"weight\" : 5, \"id\" : 15 }, { \"fishingSpot\" : \"fishingSpot\", \"altitude\" : 6.0274563, \"genus\" : \"Cyprinus\", \"longtitude\" : 0.8008282, \"length\" : 1, \"weight\" : 5, \"id\" : 15 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = " <fishingData> <id>15</id> <genus>Cyprinus</genus> <longtitude>1.3579</longtitude> <altitude>1.3579</altitude> <length>123456789</length> <weight>123456789</weight> <fishingSpot>aeiou</fishingSpot> </fishingData>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fishingData/{fishingDataId} : Find fishing data by Id
     * Returns a single record of data
     *
     * @param fishingDataId ID of fishing data record to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or FishingData not found (status code 404)
     */
    @Operation(
        operationId = "getFishingDataById",
        summary = "Find fishing data by Id",
        description = "Returns a single record of data",
        tags = { "fishingData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishingData.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = FishingData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "FishingData not found")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={ "write:fishingData", "read:fishingData" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fishingData/{fishingDataId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<FishingData> _getFishingDataById(
        @Parameter(name = "fishingDataId", description = "ID of fishing data record to return", required = true, in = ParameterIn.PATH) @PathVariable("fishingDataId") Long fishingDataId
    ) {
        return getFishingDataById(fishingDataId);
    }

    // Override this method
    default  ResponseEntity<FishingData> getFishingDataById(Long fishingDataId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fishingSpot\" : \"fishingSpot\", \"altitude\" : 6.0274563, \"genus\" : \"Cyprinus\", \"longtitude\" : 0.8008282, \"length\" : 1, \"weight\" : 5, \"id\" : 15 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<fishingData> <id>15</id> <genus>Cyprinus</genus> <longtitude>1.3579</longtitude> <altitude>1.3579</altitude> <length>123456789</length> <weight>123456789</weight> <fishingSpot>aeiou</fishingSpot> </fishingData>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /fishingData : Update an existing fish
     * Update by Id
     *
     * @param fishingData  (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Fishing data not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateFishingData",
        summary = "Update an existing fish",
        description = "Update by Id",
        tags = { "fishingData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishingData.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = FishingData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Fishing data not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={ "write:fishingData", "read:fishingData" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fishingData",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<FishingData> _updateFishingData(
        @Parameter(name = "FishingData", description = "", required = true) @Valid @RequestBody FishingData fishingData
    ) {
        return updateFishingData(fishingData);
    }

    // Override this method
    default  ResponseEntity<FishingData> updateFishingData(FishingData fishingData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fishingSpot\" : \"fishingSpot\", \"altitude\" : 6.0274563, \"genus\" : \"Cyprinus\", \"longtitude\" : 0.8008282, \"length\" : 1, \"weight\" : 5, \"id\" : 15 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<fishingData> <id>15</id> <genus>Cyprinus</genus> <longtitude>1.3579</longtitude> <altitude>1.3579</altitude> <length>123456789</length> <weight>123456789</weight> <fishingSpot>aeiou</fishingSpot> </fishingData>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /fishingData/{fishingDataId} : Updates a fishing data with form data
     *
     * @param fishingDataId ID of fishing data record that needs to be updated (required)
     * @param genus Name of genus of fish in fishing data record that needs to be updated (optional)
     * @param length Lenght of fish in fishing data record that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateFishingDataWithForm",
        summary = "Updates a fishing data with form data",
        tags = { "fishingData" },
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={ "write:fishingData", "read:fishingData" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fishingData/{fishingDataId}"
    )
    default ResponseEntity<Void> _updateFishingDataWithForm(
        @Parameter(name = "fishingDataId", description = "ID of fishing data record that needs to be updated", required = true, in = ParameterIn.PATH) @PathVariable("fishingDataId") Long fishingDataId,
        @Parameter(name = "genus", description = "Name of genus of fish in fishing data record that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "genus", required = false) String genus,
        @Parameter(name = "length", description = "Lenght of fish in fishing data record that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "length", required = false) String length
    ) {
        return updateFishingDataWithForm(fishingDataId, genus, length);
    }

    // Override this method
    default  ResponseEntity<Void> updateFishingDataWithForm(Long fishingDataId, String genus, String length) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
