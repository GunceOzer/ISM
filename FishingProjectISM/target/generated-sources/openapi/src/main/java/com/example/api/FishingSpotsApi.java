/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.FishingSpots;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-27T10:00:28.709678+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "FishingSpots", description = "the FishingSpots API")
public interface FishingSpotsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /fishingSpots/{name} : Find fishing spots by name
     *
     * @param name  (required)
     * @return successful operation (status code 200)
     *         or Invalid name supplied (status code 400)
     *         or FishingSpots not found (status code 404)
     */
    @Operation(
        operationId = "getFishingSpotsByName",
        summary = "Find fishing spots by name",
        tags = { "fishingSpots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishingSpots.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = FishingSpots.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid name supplied"),
            @ApiResponse(responseCode = "404", description = "FishingSpots not found")
        },
        security = {
            @SecurityRequirement(name = "fishingPortal_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fishingSpots/{name}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<FishingSpots> _getFishingSpotsByName(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getFishingSpotsByName(name);
    }

    // Override this method
    default  ResponseEntity<FishingSpots> getFishingSpotsByName(String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"altitude\" : 6.0274563, \"name\" : \"Olesnica\", \"longtitude\" : 0.8008282, \"id\" : 3 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<fishingSpots> <id>3</id> <name>Olesnica</name> <longtitude>1.3579</longtitude> <altitude>1.3579</altitude> </fishingSpots>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
